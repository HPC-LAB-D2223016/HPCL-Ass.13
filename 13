#include <cuda_runtime.h>
#include <stdio.h>

__global__ void multiplyMatrix(int* A, int* B, int* C, int N) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    if (row < N && col < N) {
        int sum = 0;
        for (int k = 0; k < N; k++) {
            sum += A[row * N + k] * B[k * N + col];
        }
        C[row * N + col] = sum;
    }
}

int main() {
    int N = 4;
    int size = N * N * sizeof(int);
    int h_A[N][N] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}};
    int h_B[N][N] = {{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}};
    int h_C[N][N];
    int *d_A, *d_B, *d_C;

// Initialize matrices
for (int i = 0; i < N; i++) {
    for (int j = 0; j < N; j++) {
        h_A[i][j] = 1;
        h_B[i][j] = 2;
    }
}

cudaMalloc(&d_A, size);
cudaMalloc(&d_B, size);
cudaMalloc(&d_C, size);

cudaMemcpy(d_A, h_A, size, cudaMemcpyHostToDevice);
cudaMemcpy(d_B, h_B, size, cudaMemcpyHostToDevice);

dim3 threadsPerBlock(16, 16);
dim3 blocksPerGrid((N + 15) / 16, (N + 15) / 16);

multiplyMatrix<<<blocksPerGrid, threadsPerBlock>>>(d_A, d_B, d_C, N);

// Copy result back to host
cudaMemcpy(h_C, d_C, size, cudaMemcpyDeviceToHost);

for (int i = 0; i < N; i++) {
    for (int j = 0; j < N; j++) {
        printf("%d ", h_C[i][j]);
    }
    printf("\n");
}

// Free memory
cudaFree(d_A);
cudaFree(d_B);
cudaFree(d_C);

return 0;
}
